var flatten is {:what
  var lst is Array new.
  what each_v: {:l
    (Reflect isObject: l linkedTo: Array) either: {
      lst is lst + flatten[l].
    } or: {
      lst push: l.
    }.
  }.
  ^lst.
}.
Array on: 'flatten' do: {
    ^flatten[me].
}.

String on: 'codepoint' do: {
  var ss is me bytes.
  ss < 1 ifTrue: { ^-1. }.
  var u0 is me byteAt: 0.
  (u0 >=: 0) & (u0 <=: 127) ifTrue: { ^u0. }.
  ss < 2 ifTrue: { ^-1. }.
  var u1 is me byteAt: 1.
  (u0 >=: 192) & (u0 <=: 223) ifTrue: { ^u0 - 192 * 64 + (u1 - 128). }.
  (u0 = 0xed) & (u1 bitAnd: 0xa0, = 0xa0) ifTrue: { ^-1. }. # 0xd800 - oxdfff
  ss < 3 ifTrue: { ^-1. }.
  var u2 is me byteAt: 2.
  (u0 >=: 224) & (u0 <=: 239) ifTrue: { ^u0 - 224 * 4096 + (u1 - 128 * 64) + (u2 - 128). }.
  ss < 4 ifTrue: { ^-1. }.
  var u3 is me byteAt: 3.
  (u0 >=: 240) & (u0 <=: 247) ifTrue: { ^u0 - 240 * 262144 + (u1 - 128 * 4096) + (u2 - 128 * 64) + (u3 - 128). }.
  ^-1.
}.

var keyboardLayout is [
    # 'qwertyuiop',
    # '',
    # 'asdfghjkl',
    # '',
    # 'zxcvbnm'
    ## persian
    'ضصثقفغعهخحجچ',
    '',
    'شسىبلاتنمکگ',
    '',
    'ظطزرذدپو'
] fmap!: \:x x characters.

var alphabet_first_f is 'ا'. #'a'
var alphabet_first is alphabet_first_f codepoint - 1.

var rowCounts is keyboardLayout fmap: \:x x count.
var xA        is rowCounts max + 1 / 2.
var yA        is keyboardLayout count + 1 / 2.
var thresh1   is 0.5.
var mmax      is 5.
var mmin      is 2.
var Ct        is thresh1 * mmax / (xA + yA - 2 * mmin).
var offset    is \:r rowCounts max - (rowCounts @ r) / 2.
var Pc        is \:i0:i1:j0:j1 2 * thresh1 - ((i1 - i0 + offset[i0] - offset[i1]) abs + (j1 - j0) abs * Ct).


var keymap is Map new.
keyboardLayout each: {:i:x
    x each: {:j:v
        keymap put: [i, j] at: v.
    }.
}.

var keyfmap is Map new.
([keyboardLayout flatten] * 2) product each_v: {:comb
    var keydescr is (comb fmap: \:x keymap at: x) flatten.
    var prob is Pc[keydescr @ 0, keydescr @ 2, keydescr @ 1, keydescr @ 3].
    #Pen writeln: 'Prob[${{comb join: ','}}$] = $$prob at $$keydescr'.
    (prob < thresh1) ifTrue: {
        True continue.
    }.
    keyfmap contains: comb head, ifFalse: {
        keyfmap put: Map new at: comb head.
    }.
    keyfmap at: comb head, put: prob at: comb last.
}.

var data is File new: 'data.c', open: 'w+'.
data write: '[0] = (mapv*[]) { 0 },\n'.
keyfmap each: {:k:v
  Pen writeln: 'character \'${{k}}$\'codepoint ${{k codepoint}}$ with diff ${{k codepoint - alphabet_first}}$'.
    data write: '// character $$k codepoint ${{k codepoint}}$\n[${{k codepoint - alphabet_first}}$] = (mapv*[]) {\n'.
    v each: {:k:v
        data write: '&(mapv) {${{k codepoint - alphabet_first}}$, ${{v}}$},\n\t'.
    }.
    data write: '0\n\t},\n'.
}.

Pen writeln: 'format: \'a${{keyboardLayout flatten fmap: \:x x codepoint, max - alphabet_first}}$f${{alphabet_first_f}}$\''.

data close.
