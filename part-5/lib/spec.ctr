import
  Library/Test: 'describe'
  libc: ['malloc', 'free', 'realloc']
  wordtree: 'WordTree'
  spndarray: 'SparseArray'
.

describe WordTree do: {:it
 it can handle shitty UTF8 characters do: {
   var tree is WordTree new: '../../part-4/c/dict-fa'.
   {
       tree filterSorted: 'یبیل'.
   } should not raiseError: Error.
   tree destruct.
 }.
 it can determine the levenshtein edit distance of two words do: {
   levenshtein['fest', 'test'] should = 1.
   levenshtein['what', 'wheat'] should = 1.
   levenshtein['', 'shit'] should = 4.
 }.
}.

describe SparseArray do: {:it
    it can be allocated and deallocted do: {
        var arr is SparseArray newWithDimensionSizes: [1,2,3].
        arr destruct.
    }.
    it can be accessed do: {
      var arr is SparseArray newWithDimensionSizes: [1,2,3].
      arr put: 5 at: [0,1,1].
      arr[0,1,1] should = 5.
      arr destruct.
    }.
    it can use ops do: {
      var arr0 is SparseArray newWithDimensionSizes: [1,2,3].
      var arr1 is SparseArray newWithDimensionSizes: [1,2,3].
      arr0 put: 5 at: [0,1,1].
      arr1 put: 6 at: [0,0,1].
      var arr0sum is arr0 sum: 2. # sum over last dim
      arr0sum[0,1] should = 5.
      var arr0+arr1 is arr0 + arr1.
      arr0+arr1[0,0,1] should = 6.
      var arr2 is arr0+arr1 multiply: arr0sum throughDimension: 2.
      arr2[0,1,1] should = 25.

      arr2 destruct.
      arr0sum destruct.
      arr0+arr1 destruct.
      arr0 destruct.
    }.
}.
